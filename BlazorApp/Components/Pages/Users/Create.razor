@page "/users/create"
@using Domain.DTOs.Users
@using Domain.Enums
@using Infrastructure.Interfaces
@inject IUserService UserService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Create User</PageTitle>

<div class="create-user-page">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-8 col-lg-6">
                <div class="card shadow-sm rounded-3">
                    <div class="card-header bg-primary text-white">
                        <h3 class="mb-0">Create New User</h3>
                    </div>

                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <EditForm Model="user" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-3" />

                            <div class="mb-3">
                                <label for="name" class="form-label">Full Name</label>
                                <InputText id="name" class="form-control" @bind-Value="user.Name" />
                                <ValidationMessage For="@(() => user.Name)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" class="form-control" @bind-Value="user.Email" />
                                <ValidationMessage For="@(() => user.Email)" class="text-danger" />
                            </div>
dsasdsfewqedfg
                            <div class="mb-3">
                                <label for="phone" class="form-label">Phone Number</label>
                                <InputText id="phone" class="form-control" @bind-Value="user.Phone" />
                                <ValidationMessage For="@(() => user.Phone)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <InputText id="password" type="password" class="form-control"
                                    @bind-Value="user.Password" />
                                <ValidationMessage For="@(() => user.Password)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="address" class="form-label">Address</label>
                                <InputTextArea id="address" class="form-control" @bind-Value="user.Address" />
                                <ValidationMessage For="@(() => user.Address)" class="text-danger" />
                            </div>

                            <div class="mb-4">
                                <label for="role" class="form-label">Role</label>
                                <InputSelect id="role" class="form-select" @bind-Value="user.Role">
                                    @foreach (var role in Enum.GetValues(typeof(UserRole)))
                                    {
                                        <option value="@role">@role</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => user.Role)" class="text-danger" />
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="submit" class="btn btn-primary px-4">
                                    <i class="bi bi-person-plus me-2"></i>Create User
                                </button>
                                <a href="/users" class="btn btn-outline-secondary">Cancel</a>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private CreateUserDto user = new();
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await UserService.CreateAsync(user);

            if (!response.IsSuccess)
            {
                errorMessage = response.Message ?? "An error occurred while creating the user";
                return;
            }

            Navigation.NavigateTo("/users");
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            Console.Error.WriteLine(ex);
        }
    }
}